package ex1_computer;

public class Computer {
	//클래스에 들어갈 수 있는 것 : 변수, 함수
	//1) 멤버 변수, 속성, 변수 ....
	//2) 메서드, 함수, 기능....
	
	//설계도에 해당하는 클래스에는 main이 들어가지 않는다.
	
	float cpu = 4.8f;
	int ram = 64;
	int ssd = 1024;
	String color = "white";
	
	//컴퓨터의 정보를 출력해주는 메서드(함수)를 만들어보자
	//메서드란 어떤 작업을 수행하기 위한 명령문들의 집합
	//반복적으로 사용되는 코드를 줄이기 위해 반드시 필요한 개념
	
	//자주 사용되는 내용의 코드를 메서드로 작성해 두고 필요할 떄마다 호출을해서 사용을 한다.
	
	//접근제한자 반환형 메서드명(파라미터){
	//		기능들
	//		return 반환값;
	//}
	public void getInfo() {
		System.out.println("cpu : "+ cpu + "Ghz");
		System.out.println("ram : "+ ram + "GB");
		System.out.println("ssd : "+ ssd + "GB");
		System.out.println("color : "+ color);
	}
	
	//접근제한자의 종류
	//1. public : 모든 접근을 허용, 같은 프로젝트 내의 모든 객체들이 사용할 수 있도록 허용
	//2. private : 현재 클래스 내에서만 사용을 허가
	//3. protected : 상속관계의 객체들에만 사용을 허가
	//4. default : 같은 패키지내의 객체에만 사용을 허가(아무것도 쓰지 않으면 default)
	
	//반환형
	//반환형은 메서드가 처음부터 끝까지 명령을 수행을 마친 후 반환해야할 값이 있을 경우 기입
	//int,char.float.boolean.String등 기본자료형을 포함하여 사용자가 만든 객체로도
	//반환이 가능. 단 아무것도 반환하지 않을 떄는 void를 쓴다
	
	//메서드명(함수명)
	//메서드명은 말 그대로 메서드의 이름(첫글자는 소문자로 작성한다.)
	
	//파라미터
	//파라미터는 외부에서 해당 메서드를 통해 특정 값을 전달하고자 할 때, 전달받은 값을
	//받아서 처리할 수 있도록 하는 역할
	
	//반환값
	//모든 명령을 마치고 반환해야할 값이 있다면 return을 적고 반환값을 적는다.
	//이 때 반환값과 반환형의 자료형은 반드시 일치해야 한다.
	//반환할 값이 없다면 return은 생략할 수 있다.
	
	
	
	
	
	
	
	
	
	
}









